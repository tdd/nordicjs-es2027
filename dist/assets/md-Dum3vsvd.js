import{b as r,o as l,w as i,g as e,ad as o,v as c,x as u,T as a}from"./modules/vue-D2SqzmdI.js";import{I as p}from"./slidev/default-Djcgykt1.js";import{u as m,f as d}from"./slidev/context-B49YpmHp.js";import"./index-Bvl_EBFL.js";import"./modules/shiki-DrdS9Sar.js";const b={__name:"es2026.md__slidev_31",setup(h){const{$clicksContext:s,$frontmatter:n}=m();return s.setup(),(f,t)=>(l(),r(p,c(u(a(d)(a(n),30))),{default:i(()=>[...t[0]||(t[0]=[e("h1",null,"ES2026? Timezone canonicalization",-1),e("p",null,[o("With timezones IANA names (e.g. "),e("code",null,"Europe/Stockholm"),o(") finally becoming the norm, TZDB occasional changes, however rare (at most 1 identifier change per year), creates issues.")],-1),e("p",null,[o("For instance, "),e("code",null,"Europe/Kiev"),o(" is outdated, the current standard uses "),e("code",null,"Europe/Kyiv"),o(".")],-1),e("p",null,[o("This accrues issues as developers cannot rely on stable values in their TZ name stores, test code, etc. This proposal improves the spec, updates TZDB reliance and alters some behavior in "),e("code",null,"Intl"),o(" and "),e("code",null,"Temporal"),o(" to mitigate these issues.")],-1),e("p",null,[o("In particular, a new "),e("code",null,"equals()"),o(" method on "),e("code",null,"Temporal.TimeZone"),o(" allows more flexible, time-resistant comparison than the "),e("code",null,"==="),o(" operator.")],-1)])]),_:1},16))}};export{b as default};
